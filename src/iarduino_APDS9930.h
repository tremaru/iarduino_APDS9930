//	Библиотека для работы с датчиком освещенности и приближения APDS-9930: https://iarduino.ru/shop/Sensory-Datchiki/datchik-osveschennosti-i-priblizheniya-apds-9930-trema-modul-v2-0.html
//  Версия: 1.0.3
//  Последнюю версию библиотеки Вы можете скачать по ссылке: https://iarduino.ru/file/504.html
//  Подробное описание функции бибилиотеки доступно по ссылке: https://wiki.iarduino.ru/page/trema-APDS-9930/
//  Библиотека является собственностью интернет магазина iarduino.ru и может свободно использоваться и распространяться!
//  При публикации устройств или скетчей с использованием данной библиотеки, как целиком, так и её частей,
//  в том числе и в некоммерческих целях, просим Вас опубликовать ссылку: http://iarduino.ru
//  Автор библиотеки: Панькин Павел.
//  Если у Вас возникли технические вопросы, напишите нам: shop@iarduino.ru

#ifndef iarduino_APDS9930_h																												//
#define iarduino_APDS9930_h																												//
																																		//
#if defined(ARDUINO) && (ARDUINO >= 100)																								//
#include		<Arduino.h>																												//
#else																																	//
#include		<WProgram.h>																											//
#endif																																	//
																																		//
#include		"iarduino_APDS9930_I2C.h"																								//	Подключаем библиотеку выбора реализации шины I2C.
																																		//
#if defined(TwoWire_h) || defined(__ARDUINO_WIRE_IMPLEMENTATION__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega2560__) || defined(ESP8266) || defined(ESP32) || defined(ARDUINO_ARCH_RP2040) || defined(RENESAS_CORTEX_M4) // Если подключена библиотека Wire или платы её поддерживают...
#include		<Wire.h>																												//	Разрешаем использовать библиотеку Wire в данной библиотеке.
#endif																																	//
#if defined( iarduino_I2C_Software_h )																									//	Если библиотека iarduino_I2C_Software подключена в скетче...
#include		<iarduino_I2C_Software.h>																								//	Разрешаем использовать библиотеку iarduino_I2C_Software в данной библиотеке.
#endif																																	//
																																		//
//				НАСТРОЙКИ ЧИПА ПО УМОЛЧАНИЮ:																							//
#define			APDS9930_DEF_ATIME					7		//	1 ... 255																//	Количество циклов интеграции АЦП при измерении освещённости.			Каждый цикл выполняется за 2,73 мс.
#define			APDS9930_DEF_PTIME					1		//	1 ... 255																//	Количество циклов интеграции АЦП при измерении близости.				Каждый цикл выполняется за 2,73 мс.
#define			APDS9930_DEF_WTIME					1		//	1 ... 255																//	Количество циклов ожидания между измерением близости и освещённости.	Каждый цикл выполняется за 2,73 мс.
#define			APDS9930_DEF_PPULSE					12		//	1 ... 255																//	Количество импульсов светодиода для измерения близости.					Импульсы генерируются с частотой 62,5 кГц => T=16мкс.
#define			APDS9930_DEF_PDRIVE					25		//	12,25,50,100															//	Ток светодиода в мА.
#define			APDS9930_DEF_AGAIN					1		//	1, 8, 16,120															//	Уровень усиления при вычислении освещённости (ALS).						Усиление исключается из результата. Увеличение усиления увеличит точность показаний, но уменьшит диапазон измерений.
#define			APDS9930_DEF_PGAIN					1		//	1, 2, 4, 8																//	Уровень усиления при вычислении близости (Proximity).
#define			APDS9930_DEF_CYCLE					10		//	1 ... 255																//	Количество циклов чтения освещённости для определения пульсаций.
																																		//
//				АДРЕС ЧИПА НА ШИНЕ I2C И ИДЕНТИФИКАТОР:																					//
#define			APDS9930_CHIP_ID_1					0x12																				//	ID чипа может быть 0x12, 0x20, 0x39
#define			APDS9930_CHIP_ID_2					0x20																				//
#define			APDS9930_CHIP_ID_3					0x39																				//
#define			APDS9930_ADDRESS					0x39																				//	Адрес чипа на шине I2C.
																																		//
//				БИТЫ ДОБАВАЛЯЕМЫЕ К АДРЕСУ РЕГИСТРА ЧИПА:				Адрес регистра передаётся с битами COMMAND и TYPE:				//
#define			APDS9930_BIT_ADDRESS_COMMAND		0x80	//    ╔═══════════════════════════════════════════════════════════════╗		//	COMMAND		Бит «COMMAND» устанавливается в «1» и добавляется к адресу регистра.
#define			APDS9930_BIT_ADDRESS_TYPE			0x60	//    ║                         АДРЕС РЕГИСТРА:                       ║		//	TYPE		Биты «TYPE» определяют тип запроса. Значение битов добавляются к адресу регистра.
#define			APDS9930_VAL_ADDRESS_TYPE_ONE		0x00	//    ╟───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────╢		//	TYPE_ONE	Значение битов [6-5]=00 добавляется к адресу регистра и указывает что следующие данные адресованы к одному и тому же регистру.
#define			APDS9930_VAL_ADDRESS_TYPE_INC		0x20	//    ║   7   │   6   │   5   │   4   │   3   │   2   │   1   │   0   ║		//	TYPE_INC	Значение битов [6-5]=01 добавляется к адресу регистра и указывает что это пакетный запрос (автоинкремент адреса регистра).
#define			APDS9930_VAL_ADDRESS_TYPE_CLR		0x60	//    ╟───────┼───────┴───────┼───────┴───────┴───────┴───────┴───────╢		//	TYPE_CLR	Значение битов [6-5]=11 добавляется к адресу регистра и указывает что это спец. запрос, а вместо адреса указывается одна из команд: «REG_ADDRESS_CLR_INTP», «REG_ADDRESS_CLR_INTA» или «REG_ADDRESS_CLR_INTAP».
#define			APDS9930_BIT_ADDRESS_CLR			0x1F	//    ║COMMAND│     TYPE      │    адрес регистра или команда CLR     ║		//	CLR			Биты «CLR» определяют команду сброса прерываний. Значение битов указывается вместо адреса регистра, вместе с битами «REG_ADDRESS_COMMAND» и «REG_ADDRESS_TYPE_CLR».
#define			APDS9930_VAL_ADDRESS_CLR_INTP		0x05	//    ╚═══════╧═══════════════╧═══════════════════════════════════════╝		//	CLR_INTP	Команда [4-0]=00101 сброса прерывания Proximity (близости).
#define			APDS9930_VAL_ADDRESS_CLR_INTA		0x06																				//	CLR_INTA	Команда [4-0]=00110 сброса прерывания ALS (освещённости).
#define			APDS9930_VAL_ADDRESS_CLR_INTAP		0x07																				//	CLR_INTAP	Команда [4-0]=00111 сброса прерывания Proximity и ALS.
																																		//
//				АДРЕСА РЕГИСТРОВ ЧИПА:									Карта регистров чипа с указанием всех битов:					//
#define			APDS9930_REG_ENABLE					0x00	//    ╔═════════╦═══════════════════════════════════════════════════════╗	//	R/W	(0x00)	Регистр разрешений активирует функции, разрешает прерывания, тактирования и т.д.
#define			APDS9930_REG_ATIME					0x01	//    ║НАЗВАНИЯ ║                    БИТЫ РЕГИСТРОВ:                    ║	//	R/W	(0xFF)	Регистр определяет время интеграции АЦП ALS (Ambient Light Sensing). Хранит значение обратное количеству циклов вычисления освещённости.           Значение регистра = 256 - количество циклов. Время выполнения одного цикла = 2,73 мс.
#define			APDS9930_REG_PTIME					0x02	//    ║РЕГИСТРОВ╟──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────╢	//	R/W	(0xFF)	Регистр определяет время интеграции АЦП Proximity.                   Хранит значение обратное количеству циклов вычисления близости к препятствию. Значение регистра = 256 - количество циклов. Время выполнения одного цикла = 2,73 мс.
#define			APDS9930_REG_WTIME					0x03	//    ║ЧИПА:    ║ 7бит │ 6бит │ 5бит │ 4бит │ 3бит │ 2бит │ 1бит │ 0бит ║	//	R/W	(0xFF)	Регистр определяет время нахождения модуля в режиме ожидания (Wait). Хранит значение обратное количеству циклов счёта таймера в режиме ожидания.   Значение регистра = 256 - количество циклов. Время выполнения одного цикла = 2,73 мс. Значение регистра должно быть указано до установки битов «PEN» и «AEN» регистра «REG_ENABLE».
#define			APDS9930_REG_AILT_L					0x04	//    ╠═════════╬══════╪══════╪══════╪══════╪══════╪══════╪══════╪══════╣	//	R/W	(0x00)	Регистр определяет нижний  порог освещённости при котором сработает прерывание ALS.			Младший байт.
#define			APDS9930_REG_AILT_H					0x05	// 00 ║ ENABLE  ║  --  │  SAI │ PIEN │ AIEN │  WEN │  PEN │  AEN │  PON ║	//	R/W	(0x00)	Регистр определяет нижний  порог освещённости при котором сработает прерывание ALS.			Старший байт.
#define			APDS9930_REG_AIHT_L					0x06	//    ╠═════════╬══════╧══════╧══════╧══════╧══════╧══════╧══════╧══════╣	//	R/W	(0x00)	Регистр определяет верхний порог освещённости при котором сработает прерывание ALS.			Младший байт.
#define			APDS9930_REG_AIHT_H					0x07	// 01 ║ ATIME   ║                       ATIME[7-0]                      ║	//	R/W	(0x00)	Регистр определяет верхний порог освещённости при котором сработает прерывание ALS.			Старший байт.
#define			APDS9930_REG_PILT_L					0x08	//    ╟─────────╫───────────────────────────────────────────────────────╢	//	R/W	(0x00)	Регистр определяет нижний  порог близости     при котором сработает прерывание Proximity.	Младший байт.
#define			APDS9930_REG_PILT_H					0x09	// 02 ║ PTIME   ║                       PTIME[7-0]                      ║	//	R/W	(0x00)	Регистр определяет нижний  порог близости     при котором сработает прерывание Proximity.	Старший байт.
#define			APDS9930_REG_PIHT_L					0x0A	//    ╟─────────╫───────────────────────────────────────────────────────╢	//	R/W	(0x00)	Регистр определяет верхний порог близости     при котором сработает прерывание Proximity.	Младший байт.
#define			APDS9930_REG_PIHT_H					0x0B	// 03 ║ WTIME   ║                       WTIME[7-0]                      ║	//	R/W	(0x00)	Регистр определяет верхний порог близости     при котором сработает прерывание Proximity.	Старший байт.
#define			APDS9930_REG_PERS					0x0C	//    ╠═════════╬═══════════════════════════════════════════════════════╣	//	R/W	(0x00)	Регистр определяет сколько раз подряд должен быть превышен порог для генерации прерываний.	Используется как Фильтр устойчивости срабатывания прерываний.
#define			APDS9930_REG_CONFIG					0x0D	// 04 ║ AILT_L  ║                       AILT[7-0]                       ║	//	R/W	(0x00)	Регистр конфигурации чипа.
#define			APDS9930_REG_PPULSE					0x0E	// 05 ║ AILT_H  ║                       AILT[15-8]                      ║	//	R/W	(0x00)	Регистр определяет количество импульсов генерируемых светодиодом при вычислении близости.	Импульсы генерируются с частотой 62,5 кГц => T=16мкс.
#define			APDS9930_REG_CONTROL				0x0F	//    ╟─────────╫───────────────────────────────────────────────────────╢	//	R/W	(0x00)	Регистр управления.
//				APDS9930_REG_NONAME					0x10	// 06 ║ AIHT_L  ║                       AIHT[7-0]                       ║	//	-	( -- )	Регистр не описан в datasheet.
//				APDS9930_REG_NONAME					0x11	// 07 ║ AIHT_H  ║                       AIHT[15-8]                      ║	//	-	( -- )	Регистр не описан в datasheet.
#define			APDS9930_REG_ID						0x12	//    ╠═════════╬═══════════════════════════════════════════════════════╣	//	R	( -- )	Регистр хранит ID чипа.
#define			APDS9930_REG_STATUS					0x13	// 08 ║ PILT_L  ║                       PILT[7-0]                       ║	//	R	(0x00)	Регистр статуса устройства.
#define			APDS9930_REG_CH0DATA_L				0x14	// 09 ║ PILT_H  ║                       PILT[15-8]                      ║	//	R	(0x00)	Регистр хранит результат вычислений АЦП с    фотодиода CH0 (для рассчёта освещённости).		Младший байт.
#define			APDS9930_REG_CH0DATA_H				0x15	//    ╟─────────╫───────────────────────────────────────────────────────╢	//	R	(0x00)	Регистр хранит результат вычислений АЦП с    фотодиода CH0 (для рассчёта освещённости).		Старший байт.
#define			APDS9930_REG_CH1DATA_L				0x16	// 0A ║ PIHT_L  ║                       PIHT[7-0]                       ║	//	R	(0x00)	Регистр хранит результат вычислений АЦП с ИК фотодиода CH1 (для рассчёта освещённости).		Младший байт.
#define			APDS9930_REG_CH1DATA_H				0x17	// 0B ║ PIHT_H  ║                       PIHT[15-8]                      ║	//	R	(0x00)	Регистр хранит результат вычислений АЦП с ИК фотодиода CH1 (для рассчёта освещённости).		Старший байт.
#define			APDS9930_REG_PDATA_L				0x18	//    ╠═════════╬═══════════════════════════╤═══════════════════════════╣	//	R	(0x00)	Регистр хранит результат вычислений АЦП с ИК фотодиода CH1 (для рассчёта близости    ).		Младший байт.
#define			APDS9930_REG_PDATA_H				0x19	// 0C ║ PERS    ║           PPERS           │           APERS           ║	//	R	(0x00)	Регистр хранит результат вычислений АЦП с ИК фотодиода CH1 (для рассчёта близости    ).		Старший байт.
//				APDS9930_REG_NONAME					0x1A	//    ╠═════════╬═══════════════════════════╧══════╤══════╤══════╤══════╣	//	-	( -- )	Регистр не описан в datasheet.
//				APDS9930_REG_NONAME					0x1B	// 0D ║ CONFIG  ║  --     --     --     --     --  │  AGL │ WLONG│  PDL ║	//	-	( -- )	Регистр не описан в datasheet.
//				APDS9930_REG_NONAME					0x1C	//    ╠═════════╬══════════════════════════════════╧══════╧══════╧══════╣	//	-	( -- )	Регистр не описан в datasheet.
//				APDS9930_REG_NONAME					0x1D	// 0E ║ PPULSE  ║                       PPULSE[7-0]                     ║	//	-	( -- )	Регистр не описан в datasheet.
#define			APDS9930_REG_POFFSET				0x1E	//    ╠═════════╬═════════════╤═════════════╤═════════════╤═════════════╣	//	R/W	( -- )	Регистр определяет смещение показаний близости. Значение зависит от выбранного усиления «PGAIN», мощности «PDRIVE» и количества импульсов «PPULSE».
//				APDS9930_REG_NONAME					0x1F	// 0F ║ CONTROL ║    PDRIVE   │    PDIODE   │    PGAIN    │    AGAIN    ║	//	-	( -- )	Регистр не описан в datasheet.
															//    ╠═════════╬═════════════╧═════════════╧═════════════╧═════════════╣	//
//				БИТЫ И ЗНАЧЕНИЯ РЕГИСТРОВ ЧИПА:				// 10 ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//
#define			APDS9930_BIT_ENABLE_SAI				0x40	// 11 ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//	SAI			Установка бита указывает перейти в спящий режим после прерываний Proximity или ALS.
#define			APDS9930_BIT_ENABLE_PIEN			0x20	//    ╠═════════╬═══════════════════════════════════════════════════════╣	//	PIEN		Установка бита разрешает генерацию прерываний (Proximity) по достижению границ близости.
#define			APDS9930_BIT_ENABLE_AIEN			0x10	// 12 ║ ID      ║                       ID[7-0]                         ║	//	AIEN		Установка бита разрешает генерацию прерываний (ALS)       по достижению границ освещённости.
#define			APDS9930_BIT_ENABLE_WEN				0x08	//    ╠═════════╬══════╤══════╤══════╤══════╤═════════════╤══════╤══════╣	//	WEN			Установка бита разрешает переход в состояние ожидания.
#define			APDS9930_BIT_ENABLE_PEN				0x04	// 13 ║ STATUS  ║  --  │ PSAT │ PINT │ AINT │  --     --  │PVALID│AVALID║	//	PEN			Установка бита активирует функцию вычисления близости (переход в режим Proximity). Сброс бита приводит к выходу из функции.
#define			APDS9930_BIT_ENABLE_AEN				0x02	//    ╠═════════╬══════╧══════╧══════╧══════╧═════════════╧══════╧══════╣	//	AEN			Установка бита активирует функцию вычисления освещения (переход в режим ALS). Сброс бита приводит к выходу из функции.
#define			APDS9930_BIT_ENABLE_PON				0x01	// 14 ║CH0DATA_L║                       CH0DATA[7-0]                    ║	//	PON			Установка бита активирует внутренний тактовый генератор для работы таймеров и каналов АЦП.
#define			APDS9930_BIT_PERS_PPERS				0bF0	// 15 ║CH0DATA_H║                       CH0DATA[15-8]                   ║	//	PPERS		Прерывание сработает если количество последовательных показаний близости (0...F)+1, лежат за пределами порога близости «APDS9930_REG_PIHT_HL» или «APDS9930_REG_PILT_HL».
#define			APDS9930_BIT_PERS_APERS				0b0F	//    ╟─────────╫───────────────────────────────────────────────────────╢	//	APERS		То же для прерываний освещённости, только формула работает до 3 включительно. Значения от 4 до F соответствуют количеству показаний от 5 до 60 (1 шаг = 5 показаний). Порог освещённости задаётся регистрами «APDS9930_REG_AIHT_HL» и «APDS9930_REG_AILT_HL».
#define			APDS9930_BIT_CONFIG_AGL				0x04	// 16 ║CH1DATA_L║                       CH1DATA[7-0]                    ║	//	AGL			Установка бита масштабирует уровень усиления ALS заданный битами «AGAIN» в регистре «DSL_REG_CONTROL» на 0,16.
#define			APDS9930_BIT_CONFIG_WLONG			0x02	// 17 ║CH1DATA_H║                       CH1DATA[15-8]                   ║	//	WLONG		Установка бита увеличивает время нахождения модуля в режиме ожидания, заданное регистром «DSL_REG_WTIME», в 12 раз.
#define			APDS9930_BIT_CONFIG_PDL				0x01	//    ╟─────────╫───────────────────────────────────────────────────────╢	//	PDL			Установка бита уменьшает ток светодиода заданный битами «PDRIVE» регистра «DSL_REG_CONTROL», для режима вычисления близости, в 9 раз.
#define			APDS9930_BIT_CONTROL_PDRIVE			0xС0	// 18 ║ PDATA_L ║                       PDATA[7-0]                      ║	//	PDRIVE		Биты регистра «DSL_REG_CONFIG» определяющие мощность драйвера светодиода.
#define			APDS9930_VAL_CONTROL_PDRIVE_100		0x00	// 19 ║ PDATA_H ║                       PDATA[15-8]                     ║	//	PDRIVE_100	Значение битов [7-6]=00 задаёт мощность драйвера светодиода на ток в  100 мА. Если установить бит «PDL» регистра «DSL_REG_CONFIG», то ток светодиода упадёт в 9 раз. 100 мА/9 = 11.1 мА.
#define			APDS9930_VAL_CONTROL_PDRIVE_50		0x40	//    ╠═════════╬═══════════════════════════════════════════════════════╣	//	PDRIVE_50	Значение битов [7-6]=01 задаёт мощность драйвера светодиода на ток в   50 мА. Если установить бит «PDL» регистра «DSL_REG_CONFIG», то ток светодиода упадёт в 9 раз.  50 мА/9 = 5.6 мА.
#define			APDS9930_VAL_CONTROL_PDRIVE_25		0x80	// 1A ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//	PDRIVE_25	Значение битов [7-6]=10 задаёт мощность драйвера светодиода на ток в   25 мА. Если установить бит «PDL» регистра «DSL_REG_CONFIG», то ток светодиода упадёт в 9 раз.  25 мА/9 = 2.8 мА.
#define			APDS9930_VAL_CONTROL_PDRIVE_12		0xC0	// 1B ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//	PDRIVE_12	Значение битов [7-6]=11 задаёт мощность драйвера светодиода на ток в 12,5 мА. Если установить бит «PDL» регистра «DSL_REG_CONFIG», то ток светодиода упадёт в 9 раз. 12,5мА/9 = 1.4 мА.
#define			APDS9930_BIT_CONTROL_PDIODE			0x30	// 1C ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//	PDIODE		Биты регистра «DSL_REG_CONFIG» определяющие какой фотодиод будет использован для вычисления близости Proximity.
#define			APDS9930_VAL_CONTROL_PDIODE_ON		0x20	// 1D ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//	PDIODE_ON	Значение битов [5-4]=10 выбирает фотодиод CH1 для вычисления близости Proximity. Остальные значения битов [5-4] зарезервированы.
#define			APDS9930_BIT_CONTROL_PGAIN			0x0С	//    ╠═════════╬══════╤════════════════════════════════════════════════╣	//	PGAIN		Биты регистра «DSL_REG_CONFIG» определяющие уровень усиления при вычислении близости (Proximity).
#define			APDS9930_VAL_CONTROL_PGAIN_1X		0x00	// 1E ║ POFFSET ║ SIGN │                 POFFSET                        ║	//	PGAIN_1X	Значение битов [3-2]=00 задаёт уровень усиления при вычислении близости (Proximity) в значение 1x.
#define			APDS9930_VAL_CONTROL_PGAIN_2X		0x04	//    ╠═════════╬══════╧════════════════════════════════════════════════╣	//	PGAIN_2X	Значение битов [3-2]=01 задаёт уровень усиления при вычислении близости (Proximity) в значение 2x.
#define			APDS9930_VAL_CONTROL_PGAIN_4X		0x08	// 1F ║ NONAME  ║  --     --     --     --     --     --     --     --  ║	//	PGAIN_4X	Значение битов [3-2]=10 задаёт уровень усиления при вычислении близости (Proximity) в значение 4x.
#define			APDS9930_VAL_CONTROL_PGAIN_8X		0x0C	//    ╚═════════╩═══════════════════════════════════════════════════════╝	//	PGAIN_8X	Значение битов [3-2]=11 задаёт уровень усиления при вычислении близости (Proximity) в значение 8x.
#define			APDS9930_BIT_CONTROL_AGAIN			0x03																				//	AGAIN		Биты регистра «DSL_REG_CONFIG» определяющие уровень усиления при вычислении освещённости (ALS).
#define			APDS9930_VAL_CONTROL_AGAIN_1X		0x00																				//	AGAIN_1X	Значение битов [3-2]=00 задаёт уровень усиления при вычислении освещённости (ALS) в значение 1x.   Если установить бит «AGL» регистра «DSL_REG_CONFIG», то уровень усиления масштабируется на 0,16.
#define			APDS9930_VAL_CONTROL_AGAIN_8X		0x01																				//	AGAIN_8X	Значение битов [3-2]=01 задаёт уровень усиления при вычислении освещённости (ALS) в значение 8x.   Если установить бит «AGL» регистра «DSL_REG_CONFIG», то уровень усиления масштабируется на 0,16.
#define			APDS9930_VAL_CONTROL_AGAIN_16X		0x02																				//	AGAIN_16X	Значение битов [3-2]=10 задаёт уровень усиления при вычислении освещённости (ALS) в значение 16x.  Если установить бит «AGL» регистра «DSL_REG_CONFIG», то уровень усиления масштабируется на 0,16.
#define			APDS9930_VAL_CONTROL_AGAIN_120X		0x03																				//	AGAIN_120X	Значение битов [3-2]=11 задаёт уровень усиления при вычислении освещённости (ALS) в значение 120x. Если установить бит «AGL» регистра «DSL_REG_CONFIG», то уровень усиления масштабируется на 0,16.
#define			APDS9930_BIT_STATUS_PSAT			0x40																				//	PSAT		Флаг указывающий на высокую интенсивность принимаемого сигнала при вычислении близости.
#define			APDS9930_BIT_STATUS_PINT			0x20																				//	PINT		Флаг указывающий на наличие прерывания по достижению границ близости.
#define			APDS9930_BIT_STATUS_AINT			0x10																				//	AINT		Флаг указывающий на наличие прерывания по достижению границ освещённости.
#define			APDS9930_BIT_STATUS_PVALID			0x02																				//	PVALID		Флаг указывающий на завершение вычислений близости.
#define			APDS9930_BIT_STATUS_AVALID			0x01																				//	AVALID		Флаг указывающий на завершение вычислений освещённости.
#define			APDS9930_BIT_POFFSET_SIGN			0x80																				//	SIGN		Бит положительного знака смещения: 1-положительный, 0-отрицательный. Остальные биты [6-0] являются значением смещения показаний близости.
																																		//
//				АРГУМЕНТЫ ФУНКЦИЙ:																										//
#define			APDS9930_DIODE_100					APDS9930_VAL_CONTROL_PDRIVE_100														//	100  мА		Установка тока светодиода функцией setCurrentDiode();
#define			APDS9930_DIODE_50					APDS9930_VAL_CONTROL_PDRIVE_50														//	50   мА		Установка тока светодиода функцией setCurrentDiode();
#define			APDS9930_DIODE_25					APDS9930_VAL_CONTROL_PDRIVE_25														//	25   мА		Установка тока светодиода функцией setCurrentDiode();
#define			APDS9930_DIODE_12					APDS9930_VAL_CONTROL_PDRIVE_12														//	12,5 мА		Установка тока светодиода функцией setCurrentDiode();
																																		//
class iarduino_APDS9930{																												//
	public:																																//
	/**	Конструктор класса **/																											//
		iarduino_APDS9930							(uint8_t address=APDS9930_ADDRESS){													//	Конструктор класса													(Параметр: адрес чипа на шине I2C, если не указан, то будет использован адрес по умолчанию APDS9930_ADDRESS).
													if( address>0x7F ){ address>>=1; }													//	Корректируем адрес, если он указан с учётом бита RW.
							val_Addr		=		address;																			//	Сохраняем переданный адрес чипа.
							selI2C			=		new iarduino_I2C_Select;															//	Переопределяем указатель selI2C на объект производного класса iarduino_I2C_Select.
		}																																//
	/**	Пользовательские функции **/																									//
		#if defined(TwoWire_h) || defined(__ARDUINO_WIRE_IMPLEMENTATION__)																//
		bool				begin					(TwoWire* i=&Wire ){ selI2C->begin(i); return _begin(); }							//	Определяем функцию инициализации модуля								(Параметр:  объект для работы с аппаратной шиной I2C).
		#endif																															//
		#if defined(iarduino_I2C_Software_h)																							//
		bool				begin					(SoftTwoWire* i   ){ selI2C->begin(i); return _begin(); }							//	Определяем функцию инициализации модуля								(Параметр:  объект для работы с программной шиной I2C).
		#endif																															//
		bool				reset					(void	){ return _begin(); }														//	Определяем функцию перезагрузки чипа								(Параметр:  отсутствует).
		uint16_t			getLight				(void	);																			//	Объявляем  функцию получения освещённости							(Параметр:  отсутствует).
		uint8_t				getPulsation			(void	);																			//	Объявляем  функцию получения коэффициента пульсаций источника света	(Параметр:  отсутствует).
		uint16_t			getProximity			(void	);																			//	Объявляем  функцию получения близости								(Параметр:  отсутствует).
		bool				setCurrentDiode			(uint8_t);																			//	Объявляем  функцию указания тока светодиода							(Параметр:  ток светодиода).
	private:																															//
	/**	Внутренние переменные **/																										//
		uint8_t				val_Addr			=	0;																					//	Определяем переменную для хранения адреса модуля на шине I2C.
//							Коэффициенты датчика:																						//	
		const float			cft_DF				=	52;																					//	Коэффициент вносимый датчиком.
		const float			cft_GA				=	0.49;																				//	Коэффициент затухания стекла (или линзы).
		const float			cft_B				=	1.862;																				//	Коэффициент.
		const float			cft_C				=	0.746;																				//	Коэффициент.
		const float			cft_D				=	1.291;																				//	Коэффициент.
//							Переменные для установки параметров датчика:																//	
		uint8_t				val_aTime			=	APDS9930_DEF_ATIME;																	//	Определяем переменную для хранения количества циклов интеграции АЦП при измерении освещённости.
		uint8_t				val_pTime			=	APDS9930_DEF_PTIME;																	//	Определяем переменную для хранения количества циклов интеграции АЦП при измерении близости.
		uint8_t				val_wTime			=	APDS9930_DEF_WTIME;																	//	Определяем переменную для хранения количества циклов до выхода из режима ожижания.
		uint8_t				val_pPulse			=	APDS9930_DEF_PPULSE;																//	Определяем переменную для хранения количества импульсов светодиода для измерения близости.
		uint8_t				val_pDrive			=	APDS9930_DEF_PDRIVE;																//	Определяем переменную для хранения мощности драйвера (тока через светодиод).
		uint8_t				val_aGain			=	APDS9930_DEF_AGAIN;																	//	Определяем переменную для хранения коэффициента усиления освещённости.
		uint8_t				val_pGain			=	APDS9930_DEF_PGAIN;																	//	Определяем переменную для хранения коэффициента усиления близости.
//							Переменные для опроса датчика:																				//	
		uint32_t			tmr_Start;																									//	Объявляем  переменную для хранения времени начала опроса датчика (в мс).
		float				tmr_Period;																									//	Объявляем  переменную для хранения минимального периода опроса датчика (в мс).
		uint8_t				arr_Reg[4];																									//	Объявляем  массив     для пакетного чтения данных из регистров датчика.
		uint8_t				val_Reg_8;																									//	Объявляем  переменную для чтения/записи данных регистров датчика.
//							Объект для работы с шиной I2C:																				//	
		iarduino_I2C_VirtualSelect* selI2C;																								//	Объявляем  указатель  на  объект полиморфного класса iarduino_I2C_VirtualSelect, но в конструкторе текущего класса этому указателю будет присвоена ссылка на производный класс iarduino_I2C_Select.
	/**	Внутренние функции **/																											//
		bool				_begin					(void);																				//	Объявляем  функцию инициализации чипа									(Параметр:  отсутствует).
		uint16_t			_ADCtoLux				(uint16_t, uint16_t);																//	Объявляем  функцию преобразования значений АЦП в люксы.					(Параметры:  АЦП фотодиода CH0, АЦП фотодиода CH1).
		uint16_t			_ADCtoLen				(uint8_t,  uint16_t);																//	Объявляем  функцию корректировки  значения АЦП близости.				(Параметры:  кол-во импульсов , АЦП фотодиода CH1).
		bool				_readBytes				(uint8_t    , uint8_t*, uint8_t	);													//	Объявляем  функцию чтения нескольких байт данных из регистров в массив	(Параметры:  номер первого регистра, указатель на массив, количество байт).
		bool				_readByte				(uint8_t reg, uint8_t*  data	){return _readBytes(reg, data, 1);}					//	Объявляем  функцию чтения нескольких байт данных из регистров в массив	(Параметры:  номер регистра, указатель на переменную).
		bool				_writeByte				(uint8_t    , uint8_t			);													//	Объявляем  функцию записи одного байта данных в один регистр чипа		(Параметры:  номер регистра, байт данных для записи).
};																																		//
																																		//
#endif																																	//
																																		//
																																		//
																																		//
//															СОСТОЯНИЯ ДАТЧИКА:															//	Датчик сам меняет своё состояние в соответствии с установленными битами:
//																																		//	Время нахождения датчика в определённом состоянии указано в скобках.
//                           Если было прерывание       ╔═══════════════════════╗       Если было прерывание							//
//   ┌─────────────────────────────────────── SAI ─────►║          СОН          ║◄───── SAI ───┐										//
//   │                                                  ╚══╤═════════════════╤══╝              │										//
//   ▲                                                     │                 ▲                 ▲										//
//   │                                                   СТАРТ               │                 │										//
//   │                                                    I2C              !PON                │										//
//   │      ╔═══════════════════════╗				       │                 │                 │    ╔═══════════════════════╗			//
//   │      ║       ВЫЧИСЛЕНИЕ      ║                      ▼                 │                 │    ║       ВЫЧИСЛЕНИЕ      ║			//
//   │      ║        близости       ║                   ╔══╧═════════════════╧══╗              │    ║      ОСВЕЩЁННОСТИ     ║			//
//   │      ╠═══════════════════════╣                   ║        ПРОСТОЙ        ║              │    ╠═══════════════════════╣			//
//   │      ║     ИНИЦИАЛИЗАЦИЯ     ║◄─────── PEN ◄─────║   (пока не уст бит)   ║◄─────────────┴────║                       ║			//
//   │      ║       (2,73мс)        ║                   ╚═╤═════╤══════╤════════╝                   ║                       ║			//
//   │      ╟───────────▼───────────╢                     ▲     │      ▲      │                     ║ ЦИКЛЫ ИНТЕГРАЦИИИ АЦП ║			//
//   │      ║ ИМПУЛЬСЫ НА СВЕТОДИОД ║                     │   !PEN     │    !PEN                    ║  (2,73мс*(256-ATIME)) ║			//
//   │      ║    (2,73мс*PPULSE)    ║                     │    AEN   !AEN    AEN                    ║                       ║			//
//   │      ╟───────────▼───────────╢                     │    WEN     │    !WEN                    ╟───────────▲───────────╢			//
//   │      ║       ОЖИДАНИЕ        ║        !AEN         │     │      │      │                     ║                       ║			//
//   ▲      ║       (2,73мс)        ║   ┌──► !WEN ────────┘     ▼      │      └───────►────────┐    ║                       ║			//
//   │      ╟───────────▼───────────╢   │		        ╔═══════╧══════╧════════╗              │    ║     ИНИЦИАЛИЗАЦИЯ     ║			//
//   └──────║ ЦИКЛЫ ИНТЕГРАЦИИИ АЦП ║───┼──►─ WEN ─────►║     ЦИКЛЫ ОЖИДАНИЯ    ║─────► AEN ───┼───►║       (2,73мс)        ║			//
//          ║  (2,73мс*(256-PTIME)) ║   │               ║  (2,73мс*(256-WTIME)) ║              │    ║                       ║			//
//          ╚═══════════════════════╝   │               ╚═══════════════════════╝              │    ╚═══════════════════════╝			//
//                                      └──► !WEN ────────────────────────────────────►────────┘										//
//                                           !AEN																						//
//																																		//